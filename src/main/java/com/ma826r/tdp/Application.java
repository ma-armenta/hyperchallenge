package com.ma826r.tdp;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.zip.GZIPInputStream;
import org.apache.commons.io.FileUtils;

import tech.tablesaw.api.ColumnType;
import tech.tablesaw.api.NumberColumn;
import tech.tablesaw.api.StringColumn;
import tech.tablesaw.api.Table;
import tech.tablesaw.io.csv.CsvReadOptions;
import tech.tablesaw.plotly.Plot;
import tech.tablesaw.plotly.api.*;
import tech.tablesaw.plotly.components.Figure;

import static tech.tablesaw.aggregate.AggregateFunctions.*;




public class Application {
	
// This is a custom method to download all files from the past 10 years. Those are calculated based on the current year, given as an argument.
// In main method there is also the option to hard code the date.
// Due to company network, the download of the files will not work while under ATTCORP. In that case, it will use "weather_data" included, which was 
// generated by my method.
	
	static void DownloadAndFixFile (int argAsInt) throws MalformedURLException, IOException {
		
		int[] years = java.util.stream.IntStream.rangeClosed(argAsInt-11, argAsInt-1).toArray();
		
		final String dir = System.getProperty("user.dir");
		
		System.out.println("Files will download to dir: " + dir);
		
		// File columns
		String[] colNames = {"Year","Month","Day","Hour",
				"AirTemperature", "DewPointTemperature","SeaLevelPressure",
				"WindDirection","WindSpeedRate","SkyConditionTotalCoverageCode","LPDD-One_Hour_Duration","LPDD-Six_Hour_Duration"};
		
		// Initiates main text file
		String headers = String.join(",", colNames);
		
		String mainText = "";
		
		//Download, decompression and "fix" of text files (due to weird spacing between columns)
		for(int x:years) {
			String syear = String.valueOf(x);
			
			String ftpPath = "ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-lite/" + syear +"/766800-99999-"+syear+".gz";
			
		// File download
			String toFile = dir +"/" + ftpPath.substring(ftpPath.length()-20);
			FileUtils.copyURLToFile(new URL(ftpPath), new File(toFile));
			
			
		// File decompression
			byte[] buffer = new byte[1024];
			GZIPInputStream ungz = new GZIPInputStream(new FileInputStream(toFile));
			
			
			String readyFile = toFile.substring(0,toFile.length()-3);
			System.out.println(readyFile);
		
			FileOutputStream out = new FileOutputStream(readyFile);
			
	        int len;
	        while ((len = ungz.read(buffer)) > 0) {
	        	out.write(buffer, 0, len);
	        }
	        
	        File rmfile = new File(toFile);
	        rmfile.delete();
	        
	 
	        ungz.close();
	    	out.close();
	    	
	    	File file = new File(readyFile);
	    	
	    	BufferedReader br = new BufferedReader(new FileReader(file)); 
		
	    // Removing extra spaces 
			String st;
			while ((st = br.readLine()) != null) {
				st = st.replace("     ", " ");
//				st = st.replaceAll("\\s+", " ");
				st = st.replace("   ", " ");
				st = st.replace("  ", " ");
				st = st.replace(" ", ",");
				st = st + "\n";
				mainText = mainText + st;
				
			}
			
			br.close();
			
			File rmfileUngzed = new File(readyFile);
			rmfileUngzed.delete();
		
		}

// Adding headers before writing final version of combination of all files from last 10 years
		mainText = headers + "\n" + mainText;
		
		String lastPath = dir+"/weather_data";
		
		
		BufferedWriter buffW = new BufferedWriter(new FileWriter(lastPath));
		buffW.write(mainText);
		
		buffW.close();
		
		System.out.println("All data merged for year " + argAsInt);
		
	}	

	public static void main(String[] args) {
// Because why not, I had to add some comedy when testing program.
		System.out.println("hello world!!!");
		
//  Next two lines as options to hard code current year or pass it as an argument, hardcode commented out		
		
		int argAsInt = Integer.parseInt(args[0]);
		
//		int argAsInt = Integer.parseInt("2018");
		
		
//Calling custom method above
		try { DownloadAndFixFile(argAsInt);
		
		} catch (Exception e){
			System.out.println("Using pre loaded Data");
		}
		
		final String dir = System.getProperty("user.dir");
		String lastPath = dir+"/weather_data";


// Defining column types for tablesaw library
		ColumnType[] types = {ColumnType.STRING,  ColumnType.STRING, ColumnType.STRING, ColumnType.STRING, 
								ColumnType.DOUBLE,ColumnType.DOUBLE,ColumnType.DOUBLE,ColumnType.DOUBLE,
								ColumnType.DOUBLE,ColumnType.DOUBLE,ColumnType.DOUBLE,ColumnType.DOUBLE};
	
// Loading file to tablesaw table
		try {
		Table t1 = Table.read().csv(CsvReadOptions
				.builder(lastPath)
				.separator(',')
				.sample(false)
				.columnTypes(types)
				.tableName("Weather Data in Mexico City Central")
				.missingValueIndicator("-9999")
				);
		
// Creating arrays for custom column for dates. At the end days column was not utilized
		String[] years = (String[]) t1.column("Year").asObjectArray();
		String[] months = (String[]) t1.column("Month").asObjectArray();
//		String[] days = (String[]) t1.column("Day").asObjectArray();
		
		String[] mdDates = new String[years.length];
		for(int i = 0; i < mdDates.length ; i++) {
			mdDates[i] = years[i] + "-" + months[i];
		}

// Created custom column dates and added to main table
		StringColumn Dates = StringColumn.create("Dates", mdDates);
		t1.addColumns(Dates);

	
// Created filters to summarize data by air temperature and wind speed rate
		NumberColumn AirTemperature = t1.nCol("AirTemperature");
		NumberColumn WindSpeed = t1.nCol("WindSpeedRate");
	
		
		Table results = t1.summarize(AirTemperature, mean, max, min).by("Dates");
		Table results2 = t1.summarize(WindSpeed, mean, max, min).by("Dates");
		
// Created plot for show results
		Table finalResults = results.select("Dates","Min [AirTemperature]");
		Figure fig1 = TimeSeriesPlot.create("Min Temperatures at CDMX", finalResults, "Dates","Min [AirTemperature]");	
		Plot.show(fig1);
	
		Table finalResults2 = results2.select("Dates","Mean [WindSpeedRate]");
		Figure fig2 = TimeSeriesPlot.create("Avg Wind Speeds at CDMX", finalResults2, "Dates","Mean [WindSpeedRate]");
		Plot.show(fig2);
		
		} catch(IOException e) {
			System.out.println("Error reading main file");
		}
			
// As data was filtered and cleaned this data could be used, along with its graphical representation, to identify a relationship
// possible relationships between air temperature and wind speed rates.

	}

}